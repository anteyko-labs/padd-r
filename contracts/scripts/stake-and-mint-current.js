const hre = require("hardhat");

async function main() {
  // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–∏–∑ config.ts)
  const padTokenAddress = "0xAFD38DDaA3e7829693B7a80a029a00a61FFbeC08";
  const multiStakeManagerAddress = "0x330356f6ad6fe0977d85B42A2e538294A211a234";
  const nftFactoryAddress = "0x3453a74D3EDE70cA317e6A29Bd04e82952B37050";

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const padToken = await hre.ethers.getContractAt("PADToken", padTokenAddress);
  const multiStakeManager = await hre.ethers.getContractAt("MultiStakeManager", multiStakeManagerAddress);
  const nftFactory = await hre.ethers.getContractAt("PADNFTFactory", nftFactoryAddress);

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ø–ª–æ–∏–ª–∏ (–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–∫–µ–Ω—ã)
  const [deployer] = await hre.ethers.getSigners();
  console.log("Using account:", deployer.address);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –î–û
  const balanceBefore = await padToken.balanceOf(deployer.address);
  console.log("Token balance BEFORE:", hre.ethers.formatEther(balanceBefore), "PAD");

  if (balanceBefore < hre.ethers.parseEther("1000")) {
    console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1000 PAD");
    return;
  }

  // –°—Ç–µ–π–∫–∞–µ–º 1000 PAD –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (Bronze tier) - –º–∏–Ω–∏–º—É–º –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
  const stakeAmount = hre.ethers.parseEther("1000"); // 1000 PAD
  const stakeMonths = 3; // 3 –º–µ—Å—è—Ü–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫)

  console.log("\nüîê Approving tokens for staking...");
  const approveTx = await padToken.approve(multiStakeManagerAddress, stakeAmount);
  await approveTx.wait();
  console.log("‚úÖ Approval successful");

  console.log("\nüí∞ Creating staking position...");
  const stakeTx = await multiStakeManager.createPosition(stakeAmount, stakeMonths);
  const receipt = await stakeTx.wait();

  // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ PositionCreated
  const positionCreatedEvent = receipt.logs.find(
    log => log.fragment && log.fragment.name === "PositionCreated"
  );

  if (positionCreatedEvent) {
    const positionId = positionCreatedEvent.args[0];
    console.log("‚úÖ Position created with ID:", positionId.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ü–û–°–õ–ï
    const balanceAfter = await padToken.balanceOf(deployer.address);
    console.log("üí∞ Token balance AFTER:", hre.ethers.formatEther(balanceAfter), "PAD");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–∑–∏—Ü–∏–∏
    const position = await multiStakeManager.positions(positionId);
    console.log("\nüìä Position info:");
    console.log("  - Amount:", hre.ethers.formatEther(position.amount), "PAD");
    console.log("  - Duration:", position.duration.toString(), "seconds");
    console.log("  - Start Time:", new Date(Number(position.startTime) * 1000).toISOString());
    console.log("  - Is Active:", position.isActive);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ NFT
    const nftBalance = await nftFactory.balanceOf(deployer.address);
    console.log("\nüé® NFT balance:", nftBalance.toString());

    if (nftBalance > 0) {
      console.log("\nüéâ –ù–ê–ô–î–ï–ù–´ NFT!");
      for (let i = 0; i < Number(nftBalance); i++) {
        try {
          const tokenId = await nftFactory.tokenOfOwnerByIndex(deployer.address, i);
          const owner = await nftFactory.ownerOf(tokenId);
          if (owner.toLowerCase() === deployer.address.toLowerCase()) {
            console.log(`\nüé® NFT #${tokenId.toString()}:`);
            const metadata = await nftFactory.nftMetadata(tokenId);
            console.log("  - Position ID:", metadata.positionId.toString());
            console.log("  - Amount Staked:", hre.ethers.formatEther(metadata.amountStaked), "PAD");
            console.log("  - Lock Duration (hours):", metadata.lockDurationHours.toString());
            console.log("  - Tier Level:", ["Bronze", "Silver", "Gold", "Platinum"][metadata.tierLevel]);
            console.log("  - Hour Index:", metadata.hourIndex.toString());
            console.log("  - Next Mint On:", new Date(Number(metadata.nextMintOn) * 1000).toISOString());
            
            console.log("\nüîó NFT Contract Address:", nftFactoryAddress);
            console.log("üÜî Token ID:", tokenId.toString());
            console.log("üë§ Owner:", deployer.address);
          }
        } catch (e) {
          console.log("‚ùå Error getting NFT info:", e.message);
        }
      }
    } else {
      console.log("‚ùå NFT not found after staking");
    }
  } else {
    console.log("‚ùå Position creation event not found");
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 