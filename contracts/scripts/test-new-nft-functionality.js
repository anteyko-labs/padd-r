const hre = require("hardhat");

async function main() {
  console.log("üß™ Testing new NFT functionality with isInitialStakingNFT...");

  // –ù–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const nftFactoryAddress = "0xa73877075ED2d1371ae12345E0d28623B77BB777";
  const multiStakeManagerAddress = "0xE3dB5ad755ff62C31C0Ae467237F2Dc1E5B0d54a";
  const padTokenAddress = "0x6e54ef83eD01B718c92DDEb2629E9849eDe5b94F";

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const nftFactory = await hre.ethers.getContractAt("PADNFTFactory", nftFactoryAddress);
  const multiStakeManager = await hre.ethers.getContractAt("MultiStakeManager", multiStakeManagerAddress);
  const padToken = await hre.ethers.getContractAt("PADToken", padTokenAddress);

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
  const [deployer] = await hre.ethers.getSigners();
  console.log("Testing with account:", deployer.address);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å PAD —Ç–æ–∫–µ–Ω–æ–≤
  const balance = await padToken.balanceOf(deployer.address);
  console.log("\nüí∞ PAD Token balance:", hre.ethers.formatEther(balance), "PAD");

  if (balance < hre.ethers.parseEther("1000")) {
    console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1000 PAD");
    return;
  }

  // –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç–µ–π–∫–∏–Ω–≥
  console.log("\nüîê Approving tokens for staking...");
  const approveTx = await padToken.approve(multiStakeManagerAddress, hre.ethers.parseEther("1000"));
  await approveTx.wait();
  console.log("‚úÖ Tokens approved");

  // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–µ–π–∫–∏–Ω–≥–∞ (–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–Ω—Ç–∏—Ç—å NFT)
  console.log("\nüîí Creating staking position...");
  const stakeAmount = hre.ethers.parseEther("1000");
  const stakeMonths = 3;
  
  const stakeTx = await multiStakeManager.createPosition(stakeAmount, stakeMonths);
  const stakeReceipt = await stakeTx.wait();
  console.log("‚úÖ Staking position created");

  // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ PositionCreated
  const positionCreatedEvent = stakeReceipt.logs.find(log => {
    try {
      const parsed = multiStakeManager.interface.parseLog(log);
      return parsed.name === "PositionCreated";
    } catch {
      return false;
    }
  });

  if (positionCreatedEvent) {
    const parsed = multiStakeManager.interface.parseLog(positionCreatedEvent);
    const positionId = parsed.args.positionId;
    console.log("üìä Position ID:", positionId.toString());
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT –±–∞–ª–∞–Ω—Å
  console.log("\nüé® Checking NFT balance...");
  const nftBalance = await nftFactory.balanceOf(deployer.address);
  console.log("NFT balance:", nftBalance.toString());

  if (nftBalance > 0) {
    console.log("\nüéâ –ù–ê–ô–î–ï–ù–´ NFT!");
    // –î–ª—è ERC-721A –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
    const totalSupply = await nftFactory.totalSupply();
    console.log("Total supply:", totalSupply.toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç 0 –¥–æ totalSupply
    for (let tokenId = 0; tokenId < totalSupply; tokenId++) {
      try {
        const owner = await nftFactory.ownerOf(tokenId);
        if (owner.toLowerCase() === deployer.address.toLowerCase()) {
          console.log(`\nüé® NFT #${tokenId.toString()}:`);
          console.log("  - Owner:", owner);
          
          const metadata = await nftFactory.nftMetadata(tokenId);
          console.log("  - Position ID:", metadata.positionId.toString());
          console.log("  - Amount Staked:", hre.ethers.formatEther(metadata.amountStaked), "PAD");
          console.log("  - Lock Duration (hours):", metadata.lockDurationHours.toString());
          console.log("  - Tier Level:", ["Bronze", "Silver", "Gold", "Platinum"][metadata.tierLevel]);
          console.log("  - Hour Index:", metadata.hourIndex.toString());
          console.log("  - Next Mint On:", new Date(Number(metadata.nextMintOn) * 1000).toISOString());
          console.log("  - Is Initial Staking NFT:", metadata.isInitialStakingNFT ? "‚úÖ Yes" : "‚ùå No");
          
          console.log("\nüîó NFT Contract Address:", nftFactoryAddress);
          console.log("üÜî Token ID:", tokenId.toString());
        }
      } catch (e) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        continue;
      }
    }
  } else {
    console.log("‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log("\nüìä Checking user positions...");
  const userPositions = await multiStakeManager.getUserPositions(deployer.address);
  console.log("Number of positions:", userPositions.length);

  for (let i = 0; i < userPositions.length; i++) {
    const positionId = userPositions[i];
    const position = await multiStakeManager.positions(positionId);
    console.log(`\nPosition #${positionId}:`);
    console.log("  - Amount:", hre.ethers.formatEther(position.amount), "PAD");
    console.log("  - Duration:", position.duration.toString(), "seconds");
    console.log("  - Start Time:", new Date(Number(position.startTime) * 1000).toISOString());
    console.log("  - Is Active:", position.isActive);
    console.log("  - Tier:", position.tier);
    console.log("  - Month Index:", position.monthIndex);
    console.log("  - Next Mint At:", new Date(Number(position.nextMintAt) * 1000).toISOString());
  }

  console.log("\nüéØ Test completed!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 